[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n\nlibrary(shiny)\nlibrary(readxl)\nlibrary(bslib)\n\nsource(\"global.R\")\n\n# Workaround for Chromium Issue 468227\ndownloadButton <- function(...) {\n  tag <- shiny::downloadButton(...)\n  tag$attribs$download <- NULL\n  tag\n}\n\n# Define UI for application that draws a histogram\nui <- page_navbar(title = \"QAB Macro Parser\",\n\n      nav_panel_hidden(value = \"t\",\n        layout_sidebar(\n          fillable = TRUE,\n          sidebar = sidebar(width = \"30%\",\n            div(\n              fileInput(\"file1\", \"Upload QAB Macro file(s)\",\n                        #accept = c(\".xlsx\", \"xls\"),\n                        multiple = TRUE),\n              p(\"- Do not make any changes to the files other than entering scores in the correct boxes\"),\n              p(\"- You must fill out the `Participant` field for each form completed, otherwise scores for that form will be ignored\"),\n              p(\"- Empty forms will have a single row in the data with NA values\"),\n              p(\"- The cleaned data will be in long format, with one row per question scored\")\n            ),\n            uiOutput(\"downloadButtonUI\")\n          ),\n          div(style = \"overflow-y: auto;height: 50vh; max-height: 50vh; width: 100%;\",\n              uiOutput(\"results\")\n          )\n        )\n    )\n\n    # file input for directory or excel file\n    \n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n  qab_data <- reactiveValues(data = NULL)\n  \n  observeEvent(input$file1,{\n    file <- input$file1\n    req(file)\n    files = file$datapath\n    filenames = c(file$name)\n    #print(files)\n    #print(filenames)\n   # print(file)\n    \n\n    if( length(files) > 1 ){\n      df <- tryCatch(\n        {\n          #do.call(\"rbind\", Map(clean_qab_macro, files, filenames))\n          #do.call(\"rbind\", Map(clean_qab_sheet, files, filenames))\n          do.call(\"rbind\", lapply(1:length(files), function(i) do.call(\"rbind\", Map(clean_qab_sheet, files, filenames)[[i]])))\n          \n        },\n        error = function(e) {\n          # Handle the error\n          message(\"An error occurred: \", e$message)\n          # Return a default value or take appropriate action\n          return(NULL)\n        },\n        warning = function(w) {\n          # Handle warnings if needed\n          showNotification(paste0(\"Missing data were found: \", w$message), type = \"error\")\n          # Return the result or take appropriate action\n          return(\n            \n            #do.call(\"rbind\", lapply(c(files), clean_qab_macro))\n            suppressWarnings(\n              suppressMessages(\n                do.call(\"rbind\", lapply(1:length(files), function(i) do.call(\"rbind\", Map(clean_qab_sheet, files, filenames)[[i]])))\n              )\n            )\n            \n            \n            )\n        },\n        finally = {\n          # Code to be executed regardless of success or failure\n        }\n      )  \n      \n    } else {\n\n      df <- tryCatch(\n        {\n          do.call(\"rbind\",clean_qab_sheet(files, filenames))\n        },\n        error = function(e) {\n          # Handle the error\n          message(\"An error occurred: \", e$message)\n          # Return a default value or take appropriate action\n          return(NULL)\n        },\n        warning = function(w) {\n          # Handle warnings if needed\n          showNotification(paste0(\"Missing data were found: \", w$message), type = \"error\")\n          return(\n            suppressWarnings(\n              suppressMessages(\n              #  clean_qab_sheet(files, filenames))\n              do.call(\"rbind\",clean_qab_sheet(files, filenames))\n              )\n            )\n          )\n          # Return the result or take appropriate action\n        },\n        finally = {\n          # Code to be executed regardless of success or failure\n        }\n      )  \n    }\n    \n    qab_data$data = df\n  })\n  \n  output$contents <- renderTable({\n    qab_data$data\n  })\n  \n  \n  output$results <- renderUI({\n    if(is.null(qab_data$data)){\n      div(\n        h3(\"Upload QAB Macro file(s) to preview cleaned data.\"), br(),\n        p(\"Note: This web-app does not save or store any data: it is only available in your browser while the app is open.\"),\n        p(\"If you have concerns about security/privacy, you can clone the repository and run the shiny app locally on your computer\"),\n        p(\"The source code is located at:\", tags$link(\"https://github.com/rbcavanaugh/qab\"))\n      )\n    } else {\n      tableOutput(\"contents\")\n    }\n  })\n  \n  output$downloadButtonUI <- renderUI({\n    if (!is.null(qab_data$data)) {\n      div(align = \"center\",\n        downloadButton(\"downloadData\", \"Download\"),br(),br(),\n        actionButton(\"reset\", \"Reset\")\n      )\n    } \n  })\n  \n  observeEvent(input$reset, {\n    qab_data$data <- NULL\n    #reset(\"file1\")\n  })\n  \n  output$downloadData <- downloadHandler(\n    filename = function() {\n      paste(\"QAB-\", Sys.Date(), \".csv\", sep=\"\")\n    },\n    content = function(file) {\n      write.csv(qab_data$data, file)\n    }\n  )\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"global.R","content":"\nclean_qab_sheet <- function(path, filename){\n\n  result_list <- lapply(1:3, function(i) clean_qab_macro(path = path, filename = filename, sheet_n = i))\n  return(result_list)\n}\n\nclean_qab_macro <- function(path, filename, sheet_n){\n  \n  macro <- suppressMessages(readxl::read_excel(path, sheet = sheet_n))\n  test_details_column = ifelse(grepl(\"xlsx\", path), 3, 2)\n  participant_qab = as.character(macro[[3,test_details_column]])\n  if(!is.na(participant_qab)){message(participant_qab, \"\\n\")}\n  \n  if(is.na(participant_qab)){\n    return(data.frame(\n      file = filename,\n      participant_qab = participant_qab,\n      examiner = NA,\n      form_qab = as.character(macro[[1,1]]),\n      date = NA,\n      time = NA,\n      location = NA,\n      question_id = NA,\n      question = NA,\n      score = NA\n    ))\n  }\n  \n  if(all(!is.na(macro[11:18,2][,1]))){\n    level_of_consciousness_1 <- data.frame(\n      question = macro[11:18,1][[1]],\n      score = as.numeric(macro[11:18,3][[1]])\n    )\n  } else {\n    level_of_consciousness_1 <- data.frame(\n      question = macro[11:18,1][[1]],\n      score = NA\n    )\n    message(\"Note: No data for level_of_consciousness_1\\n\")\n  }\n  \n  connected_speech_2 <- data.frame(\n    question = macro[22:31,1][[1]],\n    score = as.numeric(macro[22:31,3][[1]])\n  )\n  \n  word_comprehension_3 <- data.frame(\n    question = macro[5:12,5][[1]],\n    score = as.numeric(macro[5:12,6][[1]])\n  )\n  \n  sentence_comprehension_4 <- data.frame(\n    question = macro[16:27,5][[1]],\n    score = as.numeric(macro[16:27,6][[1]])\n  )\n  \n  picture_naming_5 <- data.frame(\n    question = macro[31:36,5][[1]],\n    score = as.numeric(macro[31:36,6][[1]])\n  )\n  \n  repetition_6 <- data.frame(\n    question = macro[5:10,8][[1]],\n    score = as.numeric(macro[5:10,9][[1]])\n  )\n  \n  reading_7 <- data.frame(\n    question = macro[14:19,8][[1]],\n    score = as.numeric(macro[14:19,9][[1]])\n  )\n  \n  motor_speech_8 <- data.frame(\n    question = macro[23:24,8][[1]],\n    score = as.numeric(macro[23:24,9][[1]])\n  )\n  \n  summary <- data.frame(\n    question = macro[29:36,8][[1]],\n    score = as.numeric(macro[29:36,9][[1]])\n  )\n  \n  df = do.call(\"rbind\", mget(ls()[!ls() %in% c(\"macro\", \"test_details_column\", \"path\", \"clean_qab_macro\", \"file\")]))\n  \n  df$form_qab = as.character(macro[[1,1]])\n  df$participant_qab = as.character(macro[[3,test_details_column]])\n  df$date = as.Date(as.numeric(macro[[4,test_details_column]]), origin = \"1899-12-30\")\n  df$time = as.character(macro[[5,test_details_column]])\n  df$location = as.character(macro[[6,test_details_column]])\n  df$examiner = as.character(macro[[7,test_details_column]])\n  df$file = filename #tail(strsplit(path, split = c(\"\\\\/\"), fixed = FALSE)[[1]], 1)\n  df$question_id = rownames(df)\n  rownames(df) = NULL\n\n    return(df[,c(9, 4, 8, 3, 5, 6, 7, 10, 1, 2)])\n    \n  \n}\n","type":"text"},{"name":"instructions.md","content":"### Upload one or more QAB Macro files\n\n- Do not make any changes to the files other than entering scores in the correct boxes\n- You must fill out the `Participant` field for each form completed, otherwise scores will be ignored\n- Forms not completed will have a single row in the data with NA values\n- The cleaned data will be in long format, with one row per question scored","type":"text"},{"name":"qab.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"},{"name":"shinylive.R","content":"shinylive::export(here::here(), here::here(\"docs\"), package_cache = TRUE)\n\nhttpuv::runStaticServer(here::here(\"docs\"))\n\n","type":"text"}]
